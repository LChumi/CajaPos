name: Build and Push Docker Image (Spring Boot with Dependencies)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Descargar el código
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurar caché de Maven para acelerar la resolución de dependencias
      - name: Configure Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Configurar JDK 17
      - name: Configure JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Configurar settings.xml para autenticarse en GitHub Packages
      - name: Configure Maven settings for GitHub Packages
        run: |
          mkdir -p ~/.m2
          echo '<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GHCR_PAT }}</password>
                    </server>
                  </servers>
                </settings>' > ~/.m2/settings.xml

      # Compilar el proyecto con Maven
      - name: Build Spring Boot application
        run: mvn clean package -DskipTests

      # Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login en GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Construir y publicar la imagen de Docker
      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/lchumi/pos_client:latest
          docker build -t $IMAGE .
          docker push $IMAGE